* Foreword
  
  An assault on large problem employs a succession of programs, most of
  which sprint into existence en route.
  
  What does matter is how well they[programs] perform and how smoothly
  they fit with other programs in the creation of still greater programs.
  
  The programmer must seek both perfection of part and adequacy of collection.
  
  Thus even though our programs are carefully handcrafted discrete
  collections of symbols, mosaics of interlocking functions, they
  continually evolve: we change them as our perception of the model
  deepens, enlarges, generalizes until the model ultimately attains a
  metastable place within still another model with which we struggle.
  /Love this description of programs as an eternal struggle or as a
  Promethean enterprise as the book notes./
  
  The source of the exhilaration associated with computer programming is
  the continual unfolding within the mind and on the computer of
  mechanisms expressed as programs and the explosion of perception they
  generate.
  
  If art interprets our dreams, the computer executes them in the guise
  of programs!
  /This is a great line./
  
  Since large programs grow from small ones, it is crucial that we
  develop an arsenal of standard program structures of whose correctness
  we have become sure -- we call them idioms -- and learn to combine
  them into larger structures using organizational techniques of proven
  value. These techniques are treated at length in this book, and
  understanding them is essential to participation in the Promethean
  enterprise called programming.
  
  Every reader should ask himself periodically ""Toward what end, toward
  what end?" -- but do not ask it too often lest you pass up the fun of
  programming for the constipation of bittersweet philosophy.
  
  Pascal is for building pyramids -- imposing, breathtaking, static
  structures built by armies pushing heavy blocks into place. Lisp is
  for building organisms -- imposing, breathtaking, dynamic structures
  built by squads fitting fluctuating myriads of simpler organisms into
  place. 
  
  Lisp programs inflate libraries with functions whose utility
  transcends the application that produced them. The list, Lisp's native
  data structure, is largely responsible for such growth of utility. The
  simple structure and natural applicability of lists are reflected in
  functions that are amazingly nonidiosyncratic. In Pascal the plethora
  of declarable data structures induces a specialization within
  functions that inhibits and penalizes casual cooperation. It is better
  to have 100 functions operate on one data structure than to have 10
  functions operate on 10 data structures. As a result the pyramid must
  stand unchanged for a millennium; the organism must evolve or perish.
  /This is full of bloody damn good advice./
  
* Preface to the Second Edition
  
  Is it possible that software is not like anything else, that it is
  meant to be discarded: that the whole point is to always see it as a
  soap bubble?
  
  Alan J. Perlis
  
* Preface to the First Edition
  
  A computer is like a violin. You can imagine a novice trying first a
  phonograph and then a violin. The latter, he says, sounds
  terrible. That is the argument we have heard from our humanists and
  most of our computer scientists. Computer programs are good, they say,
  for particular purposes, but they aren't flexible. Neither is a
  violin, or a typewriter, until you learn how to use it.
  
  Marvin Minsky, "Why Programming Is a Good Medium for Expressing
  Poorly-Understood and Sloppily-Formulated Ideas"
  
  First, we want to establish the idea that a computer language is not
  just a way of getting a computer to perform operations but rather that
  it is a novel formal medium for expressing ideas about
  methodology. Thus, programs must be written for people to read, and
  only incidentally for machines to execute.
  /A very key idea./
  
  Second, we believe that the essential material to be addressed by a
  subject at this level is not the syntax of particular
  programming-language constructs, nor clever algorithms for computing
  particular functions efficiently, nor even the mathematical analysis
  of algorithms and the foundations of computing, but rather the
  techniques used to control the intellectual complexity of large
  software systems.
  /So they are not concentrating on the
  syntax/algorithms/correctness/foundations, it's on the techniques used
  to manage software complexity. This is very key to understand./
  
  Our goal is that students who complete this subject should have a good
  feel for the elements of style and the aesthetics of programming. They
  should have command of the major techniques for controlling complexity
  in a large system. They should know what not to read, and what they
  need not understand at any moment. They should feel secure about
  modifying a program, retaining the spirit and style of the original
  author.
  
  These skills are by no means unique to computer programming. The
  techniques we teach and draw upon are common to all of engineering
  design. We control complexity by building abstractions that hide
  details when appropriate. We control complexity by establishing
  conventional interfaces that enable us to construct systems by
  combining standard, well-understood pieces in a ``mix and match''
  way. We control complexity by establishing new languages for
  describing a design, each of which emphasizes particular aspects of
  the design and deemphasizes others.
  
  The computer revolution is a revolution in the way we think and in the way we express what we think.
  
  Underlying our approach to this subject is our conviction that
  ``computer science'' is not a science and that its significance has
  little to do with computers. The computer revolution is a revolution
  in the way we think and in the way we express what we think. The
  essence of this change is the emergence of what might best be called
  procedural epistemology -- the study of the structure of knowledge
  from an imperative point of view, as opposed to the more declarative
  point of view taken by classical mathematical subjects. Mathematics
  provides a framework for dealing precisely with notions of "what
  is." Computation provides a framework for dealing precisely with
  notions of "how to."
  /Don't think I fully understand this./
