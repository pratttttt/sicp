A programming language is more than just a means for instructing a
computer to perform tasks. It serves as a framework within which we
organize our ideas about processes.

Every language has three mechanisms that combine simple idea into more
complex ones:
1. Primitive Expressions: Simplest entities in the language
2. Means of Combination: Compound elements are build from simpler ones
3. Means of Abstraction: Compound elements can be named and
   manipulated as units.
   
* 1.1.1 Expressions
  
  (+ 137 349)
  Expressions such as these, formed by delimiting a list of expressions
  within parantheses in order to denote procedure application, are
  called combinations. Leftmost element is the operator and the other
  elements are called operands.
  
  Lisp follows prefix notation.
  
  The interpreter always operates in the same basic cycle known as
  read-eval-print loop.
  
  "Lisp programmers know the value of everything but the cost of
  nothing." - Alan Perlis
  
* 1.1.2 Naming and the Environment
  
  A critical aspect of a programming language is the means it provides
  for using names to refer to computational objects. We say that the
  name identifies a variable whose value is the object.
  
  define is our language's simplest means of abstraction, for it allows
  us to use simple names to refer to the results of compound operations.
  
  It should be clear that the possibility of associating values with
  symbols and later retrieving them means that the interpreter must
  maintain some sort of memory that keeps track of the name-object
  pairs. This memory is called the environment or more precisely the
  global environment.
  
* 1.1.3 Evaluating Combinations
  
  Let's assume the interpreter follows a procedure in order to
  evaluate combinations:
1. Evaluate the subexpressions of the combination.
   This step indicates that the evaluation is recursive in nature,
   since we have to 'evaluate' the subexpressions using this very same rules.
2. Apply the procedure that is the value of the leftmost subexpression
   (the operator) to the arguments that are the values of the other
   subexpressions (the operands).
   
   The equation:
   (* (+ 2 (* 4 6))
   (+ 3 5 7)) 
   can be represented in the form of a tree: [[http://mitpress.mit.edu/sicp/full-text/book/ch1-Z-G-1.gif][Figure 1.1 Equation Tree]]
   Terminal nodes represent either operators or numbers.
   
Viewing evaluation in terms of the tree, we can imagine the values of
the operands percolate upward, starting from the terminal nodes and
then combining at higher and higher levels.

We shall see that recursion is a very powerful technique for dealing
with hierarchical, treelike objects. In fact, the "percolate values
upward" form of the evaluation rule is an example of a general kind of
process known as tree accumulation.

The environment plays a key role in determining the meaning of the symbols.

(define x 3) is not a combination but rather it associates x with 3.

These are known as special forms. Each special form has it's own
evaluation rule.

"Syntactic Sugar causes cancer of the semicolon" - Alan Perlis

* 1.1.4 Compound Procedures
Procedure definitions are a much more powerful abstraction technique
by which a compound operation can be given a name and then referred to
as a unit.

(define (<name> <formal parameters>) <body>)
Formal parameters are the names used within the body of the procedure
to refer to the corresponding arguments of the procedure.

* 1.1.5 The Substitution Model for Procedure Application
The substitution model is only a rough model to explain what is
actually going underneath the hood. A way to get started thinking
formally about the evaluation process.

It is surprisingly complicated to give a rigorous mathematical
definition of the substitution process. THe problem arises form teh
possibility of confusion between the names used for the formal
parameters of a procedure and the (possibly identical) names used in
the expressions to which the procedure may be applied. Indeed, there
is a long history of erroneous definitions of substitution in the
literature of logic and programming semantics.

Fully expand and then reduce => Normal-order evaluation.
Evaluate the arguments and then apply method => Applicative order evaluation.

Lisp uses applicative-order evaluation, partly because of the
additional efficiency obtained from avoiding multiple evaluations of
expressions such as those illustrated with (+ 5 1) and (* 5 2) above
and, more significantly, because normal-order evaluation becomes much
more complicated to deal with when we leave the realm of procedures
that can be modeled by substitution. On the other hand, normal-order
evaluation can be an extremely valuable tool when we deal with stream
processing and apparently infinite data structures by incorporating a
limited form of normal-order evaluation.

* 1.1.6 Conditional Expressions and Predicates
  
  Introducing case analysis.
  
  A conditional consists of clauses called predicate and consequent expression.
  (cond <p1> <e1> <p2><e2> ...)
  
  Idea: Instead of else in a conditional expression, you could use a
  any expression that when evaluated return true always.
  (define (abs x)
  (cond ((< x 0) (- x))
  ((= 1 1) x)))
  is a valid replacement for else.
  
  (if <predicate> <consequent> <alternative>)
  
* 1.1.7 Example: Square Roots by Newton's Method
  
  The difference between mathematical functions and computer
  procedures are that they must be effective.
  
  /As the name indicates a computer procedure should be prescriptive of
  how it would reach at the solution./
  
  The contrast between function and procedure is a reflection of the
  general distinction between describing properties of things and
  describing how to do things, or, as it is sometimes referred to, the
  distinction between declarative knowledge and imperative knowledge. 
  
  In mathematics we are usually concerned with declarative (what is)
  descriptions, whereas in computer science we are usually concerned
  with imperative (how to) descriptions.
  /Computers are increasingly trying to be declarative, even though
  not purely possible at the moment, advances are being made./

  It is crucial that each procedure accomplishes an identifiable task
  that can be used as a module in defining other procedures. As far as
  a specific function is concerned, other functions that are used in
  the function acts as black box procedural abstractions whose
  implementation detail doesn't matter at that level.
  
A user need not know how the procedure is implemented in order to use
it.

/This has repercussions in language implementation as well, you need
not know how the language is implemented in order to use it. But
probably to use it well enough, you might need to know the
implementation detail but this is not a show stopper at all./


