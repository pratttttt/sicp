1. Combining simple ideas into a compound one.
2. Ideas of relation by contrast between two ideas.
3. Separating them from all other ideas and seeing it
singularly and thus all its general ideas are made.

- John Locke, An Essay Concerning Human Understanding
  
Computational processes are abstract beings that inhabit computers. As
they evolve, processes manipulate other abstract things called data.

The evolution of a process is directed by a pattern of rules called a program.

People create programs to direct processes.

A computer program is like a sorcerer's spell. They are carefully
composed from symbolic expressions in arcane and esoteric programming
languages that prescribe the tasks we want our porcesses to perform.

Well designed computational systems, like well-designed automobiles
or nuclear reactors, are designed in a modular manner, so that the
parts can be constructed, replaced, and debugged separately.

* Programming in Lisp
The language was conceived by John McCarthy as a formalism for
reasoning about the use of certain kinds of logical expressions,
called recursion equations.

Because of its experimental character and its emphasis on symbol
manipulation, Lisp was at first very inefficient for numerical
computations, at least in comparison with Fortran. Over the years,
however, Lisp compilers have been developed that translate programs
into machine code that can perform numerical computations reasonably
efficiently. And for special applications, Lisp has been used with
great effectiveness. Although Lisp has not yet overcome its old
reputation as hopelessly inefficient, Lisp is now used in many
applications where efficiency is not the central concern.

If Lisp is not a mainstream language, why are we using it as the
framework for our discussion of programming?
Because of it's unique features:
1) Lisp descriptions of processes, called procedures, can themselves
   be represented and manipulated as Lisp data. The importance of this
   is that there are powerful program-design techniques that rely on
   the ability to blur the traditional distinction between "passive"
   data and "active" processes. As we shall discover, Lisp's
   flexibility in handling procedures as data makes it one of the most
   convenient languages in existence for exploring these
   techniques.
2) The ability to represent procedures as data also makes Lisp an
   excellent language for writing programs that must manipulate other
   programs as data, such as the interpreters and compilers that
   support computer languages.
3) Above and beyond these considerations, programming in Lisp is great fun.

